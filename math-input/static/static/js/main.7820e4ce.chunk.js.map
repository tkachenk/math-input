{"version":3,"sources":["components/MathInput/index.js","App.js","index.js"],"names":["MathInput","value","onChange","keyboard","useState","showPopup","togglePopup","mathField","setMathField","pressCtrl","setPressCtrl","inputBlockRef","useRef","inputWrapRef","formBasicTemplate","keyboardLayout","document","createElement","className","keyboardFunctions","reduce","prev","current","latex","name","keyboardSystems","keyboardSystemsEmpty","length","innerHTML","outerHTML","handlerClickWindow","e","target","parentNode","window","removeEventListener","handlerKeyDownWindow","handlerKeyUpWindow","handlerKeyDownField","keyCode","indexOf","index","String","slice","$insert","handlerFocus","addEventListener","handlerInput","payload","$text","console","warn","useEffect","MathLive","makeMathField","onContentDidChange","onFocus","isMobile","onKeystroke","virtualKeyboardTheme","virtualKeyboardMode","customVirtualKeyboardLayers","basic","customVirtualKeyboards","label","layer","virtualKeyboards","ref","map","btn","i","key","onClick","latexString","$el","querySelector","focus","dangerouslySetInnerHTML","__html","App","props","state","log","this","React","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7820e4ce.chunk.js","sourcesContent":["import React, {useRef, useEffect, useState} from 'react';\nimport MathLive from \"mathlive\";\nimport \"mathlive/dist/mathlive.css\";\nimport \"mathlive/dist/mathlive.core.css\";\nimport \"./style.css\";\nimport {isMobile} from \"react-device-detect\";\n\n/**\n * @name MathInput\n * @param {string} value\n * @param {function} onChange\n * @param {Object[]} keyboard\n */\n\nfunction MathInput({value = '', onChange = null, keyboard = []}) {\n    const [showPopup, togglePopup] = useState(false)\n    const [mathField, setMathField] = useState({})\n    const [pressCtrl, setPressCtrl] = useState(false)\n    const inputBlockRef = useRef()\n    const inputWrapRef = useRef()\n\n    useEffect(() => {\n        setMathField(MathLive.makeMathField(inputBlockRef.current, {\n            onContentDidChange: handlerInput,\n            onFocus: !isMobile ? handlerFocus : null,\n            onKeystroke: !isMobile ? handlerKeyDownField : null,\n            virtualKeyboardTheme: 'apple',\n            virtualKeyboardMode: isMobile ? \"manual\" : \"off\",\n            customVirtualKeyboardLayers: {\n                basic: formBasicTemplate()\n            },\n            customVirtualKeyboards: {\n                basic: {\n                    label: \"Basic\",\n                    layer: \"basic\"\n                }\n            },\n            virtualKeyboards: \"basic\"\n        }))\n\n        return function cleanup() {\n            window.removeEventListener('click', handlerClickWindow)\n            window.removeEventListener('keydown', handlerKeyDownWindow)\n            window.removeEventListener('keyup', handlerKeyUpWindow)\n        }\n    }, [])\n\n    function formBasicTemplate() {\n        const keyboardDefault = `\n            <button class='keycap'>7</button>\n            <button class='keycap'>4</button>\n            <button class='keycap'>1</button>\n            <button class='keycap'>0</button>\n\n            <button class='keycap'>8</button>\n            <button class='keycap'>5</button>\n            <button class='keycap'>2</button>\n            <button class='keycap'>.</button>\n\n            <button class='keycap'>9</button>\n            <button class='keycap'>6</button>\n            <button class='keycap'>3</button>\n            <button class='keycap' data-insert=\"-\\\\placeholder{}\">(–)</button>\n        `\n        const keyboardLayout = document.createElement('div')\n        keyboardLayout.className = 'grid'\n\n        const keyboardFunctions = keyboard.reduce((prev, current) => {\n            const str = `<button class='keycap' data-insert=\"${current.latex}\">${current.name}</button>`\n            return prev + str\n        }, '')\n\n        let keyboardSystems = ''\n        let keyboardSystemsEmpty = 0\n        const divide = keyboard.length % 4\n        switch (divide) {\n            case 0:\n                keyboardSystemsEmpty = 2;\n                break\n            case 1:\n                keyboardSystemsEmpty = 1;\n                break\n            case 2:\n                keyboardSystemsEmpty = 0;\n                break\n            case 3:\n                keyboardSystemsEmpty = 3;\n                break\n            default:\n                break\n        }\n\n        while (keyboardSystemsEmpty > 0) {\n            keyboardSystems += '<div></div>'\n            keyboardSystemsEmpty--\n        }\n\n        keyboardSystems = keyboardSystems + `\n            <button class='action' data-command='\"deletePreviousChar\"'>&#x232b;</button>\n            <button class='action' data-command='\"toggleVirtualKeyboard\"'>↓</button>\n        `\n\n        keyboardLayout.innerHTML = keyboardDefault + keyboardFunctions + keyboardSystems\n        return keyboardLayout.outerHTML\n    }\n\n    function handlerClickWindow(e) {\n        let target = e.target\n        while (target && target !== inputWrapRef.current) {\n            target = target.parentNode\n        }\n\n        if (!target) {\n            togglePopup(false)\n            window.removeEventListener('click', handlerClickWindow)\n            window.removeEventListener('keydown', handlerKeyDownWindow)\n            window.removeEventListener('keyup', handlerKeyUpWindow)\n        }\n    }\n\n    function handlerKeyDownField(mathField, keyCode) {\n        if (keyCode.indexOf('Ctrl-Digit') >= 0) {\n            const index = String(keyCode.slice(keyCode.length - 1, keyCode.length))\n            if (keyboard[index - 1]) {\n                mathField.$insert(keyboard[index - 1].latex)\n            }\n            return false\n        } else {\n            return true\n        }\n    }\n\n    function handlerKeyDownWindow(e) {\n        if (e.keyCode === 17) {\n            setPressCtrl(true)\n        }\n    }\n\n    function handlerKeyUpWindow(e) {\n        if (e.keyCode === 17) {\n            setPressCtrl(false)\n        }\n    }\n\n    function handlerFocus() {\n        togglePopup(true)\n        window.addEventListener('click', handlerClickWindow)\n        window.addEventListener('keydown', handlerKeyDownWindow)\n        window.addEventListener('keyup', handlerKeyUpWindow)\n    }\n\n    function handlerInput(payload) {\n        if (onChange && typeof onChange === 'function') {\n            onChange(payload.$text('latex'))\n        } else {\n            console.warn('Method \"onChange\" not defined in math-input')\n        }\n    }\n\n    function handlerInsert(latexString) {\n        mathField.$insert(latexString)\n        mathField.$el().querySelector('.ML__textarea__textarea').focus()\n    }\n\n    return (\n        <div className=\"wrap\" ref={inputWrapRef}>\n            <div className=\"input\" ref={inputBlockRef}>{value || ''}</div>\n            {\n                showPopup ? <div className=\"popup\">\n                    {\n                        keyboard.map((btn, i) =>\n                            <button\n                                className=\"btn\"\n                                key={i + 1}\n                                onClick={() => handlerInsert(btn.latex)}\n                            >\n                                <div dangerouslySetInnerHTML={{__html: btn.name}}/>\n                                {pressCtrl ? <span>{i + 1}</span> : null}\n                            </button>\n                        )\n                    }\n                </div> : null\n            }\n        </div>\n    )\n}\n\nexport default MathInput\n","import React from 'react'\nimport MathInput from './components/MathInput';\n// import MathInput from \"@bit/tkeded.math.math-input\";\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: '',\n            keyboard: [\n                {\n                    name: 'cos',\n                    latex: '\\\\cos{\\\\placeholder{}}'\n                },\n                {\n                    name: 'sin',\n                    latex: '\\\\sin{\\\\placeholder{}}'\n                },\n                {\n                    name: '(',\n                    latex: '('\n                },\n                {\n                    name: ')',\n                    latex: ')'\n                },\n                {\n                    name: 'tg',\n                    latex: '\\\\tg{\\\\placeholder{}}'\n                },\n                {\n                    name: '&divide;',\n                    latex: '\\\\frac{\\\\placeholder{}}'\n                },\n                {\n                    name: '&times;',\n                    latex: '\\\\times'\n                }\n            ]\n        }\n    }\n    handlerInput(e) {\n        console.log(e)\n    }\n    render() {\n        return (\n            <div>\n                <MathInput\n                    value={this.state.value}\n                    onChange={this.handlerInput}\n                    keyboard={this.state.keyboard}\n                />\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}